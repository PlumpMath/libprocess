# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _process
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


processes = {}

class PID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pipe"] = _process.PID_pipe_set
    __swig_getmethods__["pipe"] = _process.PID_pipe_get
    if _newclass:pipe = _swig_property(_process.PID_pipe_get, _process.PID_pipe_set)
    __swig_setmethods__["ip"] = _process.PID_ip_set
    __swig_getmethods__["ip"] = _process.PID_ip_get
    if _newclass:ip = _swig_property(_process.PID_ip_get, _process.PID_ip_set)
    __swig_setmethods__["port"] = _process.PID_port_set
    __swig_getmethods__["port"] = _process.PID_port_get
    if _newclass:port = _swig_property(_process.PID_port_get, _process.PID_port_set)
    def __init__(self, *args): 
        this = _process.new_PID(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _process.delete_PID
    __del__ = lambda self : None;
PID_swigregister = _process.PID_swigregister
PID_swigregister(PID)
cvar = _process.cvar
PROCESS_ERROR = cvar.PROCESS_ERROR
PROCESS_TIMEOUT = cvar.PROCESS_TIMEOUT
PROCESS_EXIT = cvar.PROCESS_EXIT
PROCESS_MSGID = cvar.PROCESS_MSGID

make_pid = _process.make_pid
class msg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_from"] = _process.msg__from_set
    __swig_getmethods__["_from"] = _process.msg__from_get
    if _newclass:_from = _swig_property(_process.msg__from_get, _process.msg__from_set)
    __swig_setmethods__["to"] = _process.msg_to_set
    __swig_getmethods__["to"] = _process.msg_to_get
    if _newclass:to = _swig_property(_process.msg_to_get, _process.msg_to_set)
    __swig_setmethods__["id"] = _process.msg_id_set
    __swig_getmethods__["id"] = _process.msg_id_get
    if _newclass:id = _swig_property(_process.msg_id_get, _process.msg_id_set)
    __swig_setmethods__["len"] = _process.msg_len_set
    __swig_getmethods__["len"] = _process.msg_len_get
    if _newclass:len = _swig_property(_process.msg_len_get, _process.msg_len_set)
    def __init__(self, *args): 
        this = _process.new_msg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _process.delete_msg
    __del__ = lambda self : None;
msg_swigregister = _process.msg_swigregister
msg_swigregister(msg)

class Process(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Process, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Process, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Process:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _process.new_Process(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return _process.Process___call__(*args)
    def _self(*args): return _process.Process__self(*args)
    def _from(*args): return _process.Process__from(*args)
    def msgid(*args): return _process.Process_msgid(*args)
    def send(*args): return _process.Process_send(*args)
    def receive(*args): return _process.Process_receive(*args)
    def body(*args): return _process.Process_body(*args)
    def pause(*args): return _process.Process_pause(*args)
    def link(*args): return _process.Process_link(*args)
    RDONLY = _process.Process_RDONLY
    WRONLY = _process.Process_WRONLY
    RDWR = _process.Process_RDWR
    def await(*args): return _process.Process_await(*args)
    def ready(*args): return _process.Process_ready(*args)
    __swig_destroy__ = _process.delete_Process
    __del__ = lambda self : None;
    def getPID(*args): return _process.Process_getPID(*args)
    def spawn(*args):
        
        process, = args
        processes[process.getPID().pipe] = process

        return _process.Process_spawn(*args)

    if _newclass:spawn = staticmethod(spawn)
    __swig_getmethods__["spawn"] = lambda x: spawn
    def wait(*args):
        val = _process.Process_wait(*args)
        
        pid, = args
        del processes[pid.pipe]

        return val

    if _newclass:wait = staticmethod(wait)
    __swig_getmethods__["wait"] = lambda x: wait
    def __disown__(self):
        self.this.disown()
        _process.disown_Process(self)
        return weakref_proxy(self)
Process_swigregister = _process.Process_swigregister
Process_swigregister(Process)

def Process_spawn(*args):
  
  process, = args
  processes[process.getPID().pipe] = process

  return _process.Process_spawn(*args)

def Process_wait(*args):
  val = _process.Process_wait(*args)
  
  pid, = args
  del processes[pid.pipe]

  return val



